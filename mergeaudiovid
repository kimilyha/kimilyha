from moviepy.editor import VideoFileClip, AudioFileClip
import os
import asyncio
from hikkatl import loader, utils

@loader.tds
class VideoAudioMergerMod(loader.Module):
    strings = {
        "name": "VideoAudioMerger",
        "saving_video": "<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ...</b>",
        "saving_audio": "<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ...</b>",
        "merging": "<b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ...</b>",
        "done": "<b>–ì–æ—Ç–æ–≤–æ!</b>",
        "error": "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {}",
        "no_video": "<b>–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .savevid –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ.</b>",
        "no_audio": "<b>–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .saveaud –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ.</b>"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def savevidcmd(self, message):
        reply = await message.get_reply_message()
        if not reply or not reply.video:
            await utils.answer(message, self.strings["error"].format("–ù–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ –Ω–µ—Ç —Ä–µ–ø–ª–∞—è"))
            return
        await utils.answer(message, self.strings["saving_video"])
        video = await self.client.download_media(reply.media)
        self.db.set(self.strings["name"], "video", video)
        await utils.answer(message, self.strings["done"])

    async def saveaudcmd(self, message):
        reply = await message.get_reply_message()
        if not reply or not reply.audio:
            await utils.answer(message, self.strings["error"].format("–ù–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –Ω–µ—Ç —Ä–µ–ø–ª–∞—è"))
            return
        await utils.answer(message, self.strings["saving_audio"])
        audio = await self.client.download_media(reply.media)
        self.db.set(self.strings["name"], "audio", audio)
        await utils.answer(message, self.strings["done"])

    async def outputcmd(self, message):
        video_path = self.db.get(self.strings["name"], "video", None)
        audio_path = self.db.get(self.strings["name"], "audio", None)

        if not video_path:
            await utils.answer(message, self.strings["no_video"])
            return

        if not audio_path:
            await utils.answer(message, self.strings["no_audio"])
            return

        await utils.answer(message, self.strings["merging"])

        try:
            video = VideoFileClip(video_path)
            audio = AudioFileClip(audio_path)

            video_with_audio = video.set_audio(audio)
            output_path = "output.mp4"
            video_with_audio.write_videofile(output_path)

            await self.client.send_file(message.to_id, output_path, caption="üé• Video with Audio")
            os.remove(output_path)

            self.db.set(self.strings["name"], "video", None)
            self.db.set(self.strings["name"], "audio", None)
            await utils.answer(message, self.strings["done"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
